
name: ${PROJECT_NAME}


x-defaults: &defaults
  networks:
    - project_network
  extra_hosts:
    - "host.docker.internal:host-gateway"
  restart: unless-stopped
  

services:
  ollama-cpu:
    <<: [*defaults]
    profiles: ["cpu"]
    container_name: ${PROJECT_NAME}_ollama
    image: ollama/ollama:latest
    ports:
      - ${OLLAMA_PORT_HOST}:${OLLAMA_PORT_CONT}
    volumes:
      - ollama_storage:/root/.ollama

  ollama-gpu:
    <<: [*defaults]
    profiles: ["gpu-nvidia"]
    container_name: ${PROJECT_NAME}_ollama
    image: ollama/ollama:latest
    ports:
      - ${OLLAMA_PORT_HOST}:${OLLAMA_PORT_CONT}
    volumes:
      - ollama_storage:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    <<: [*defaults]
    profiles: ["cpu"]
    container_name: ${PROJECT_NAME}_ollama_pull
    image: ollama/ollama:latest
    restart: no
    environment:
      - MODELS_TO_PULL
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/bash
    command:
      - "-c"
      - "sleep 5; read -r -a MODEL_ARRAY <<< `echo $$MODELS_TO_PULL | /usr/bin/tr ',' ' '`; for MODEL in $${MODEL_ARRAY[@]}; do echo $$MODEL; sleep 3; OLLAMA_HOST=host.docker.internal:11434 ollama pull $$MODEL; done"
    depends_on:
      ollama-cpu:
        condition: service_started

  ollama-pull-llama-gpu:
    <<: [*defaults]
    profiles: ["gpu-nvidia"]
    container_name: ${PROJECT_NAME}_ollama_pull
    image: ollama/ollama:latest
    restart: no
    environment:
      - MODELS_TO_PULL
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/bash
    command:
      - "-c"
      - "sleep 5; read -r -a MODEL_ARRAY <<< `echo $$MODELS_TO_PULL | /usr/bin/tr ',' ' '`; for MODEL in $${MODEL_ARRAY[@]}; do echo $$MODEL; sleep 3; OLLAMA_HOST=host.docker.internal:11434 ollama pull $$MODEL; done"
    depends_on:
      ollama-gpu:
        condition: service_started

  open-webui:
    <<: [*defaults]
    profiles:
      - ${DISABLE_OPEN_WEBUI:-}
    container_name: ${PROJECT_NAME}_open_webui
    image: ghcr.io/open-webui/open-webui:main
    volumes:
      - open_webui_storage:/app/backend/data
    ports:
      - ${OPEN_WEBUI_PORT_HOST}:${OPEN_WEBUI_PORT_CONT}
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_HOST}:${OLLAMA_PORT_HOST}
  
  n8n-import:
    <<: [*defaults]
    profiles:
      - ${DISABLE_N8N:-}
    container_name: ${PROJECT_NAME}_n8n_import
    image: n8nio/n8n:latest
    restart: no
    environment:
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${DB_HOST}
      - DB_POSTGRESDB_USER=${DB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD}
      - N8N_DIAGNOSTICS_ENABLED
      - N8N_PERSONALIZATION_ENABLED
      - N8N_ENCRYPTION_KEY
      - N8N_USER_MANAGEMENT_JWT_SECRET
    volumes:
      - uploads:/uploads
      - persistent_workflows:/persistent_workflows
      - n8n_storage:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:workflow --separate --input=/persistent_workflows/"

  n8n:
    <<: [*defaults]
    profiles:
      - ${DISABLE_N8N:-}
    container_name: ${PROJECT_NAME}_n8n
    image: n8nio/n8n:latest
    ports:
      - ${N8N_PORT_HOST}:${N8N_PORT_CONT}
    environment:
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${DB_HOST}
      - DB_POSTGRESDB_USER=${DB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD}
      - N8N_DIAGNOSTICS_ENABLED
      - N8N_PERSONALIZATION_ENABLED
      - N8N_ENCRYPTION_KEY
      - N8N_USER_MANAGEMENT_JWT_SECRET
    volumes:
      - uploads:/uploads
      - persistent_workflows:/persistent_workflows
      - n8n_storage:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  postgres:
    <<: [*defaults]
    profiles:
      - ${DISABLE_POSTGRES:-}
    container_name: ${PROJECT_NAME}_postgres
    image: postgres:16-alpine
    ports:
      - ${DB_PORT_HOST}:${DB_PORT_CONT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${DB_USER} -d ${DB_DATABASE}']
      interval: 5s
      timeout: 5s
      retries: 10

  qdrant:
    <<: [*defaults]
    profiles:
      - ${DISABLE_QDRANT:-}
    container_name: ${PROJECT_NAME}_qdrant
    image: qdrant/qdrant
    ports:
      - ${QDRANT_PORT_HOST}:${QDRANT_PORT_CONT}
    volumes:
      - qdrant_storage:/qdrant/storage

  flowise:
    <<: [*defaults]
    profiles:
      - ${DISABLE_FLOWISE:-}
    container_name: ${PROJECT_NAME}_flowise
    image: flowiseai/flowise
    volumes:
      - flowise_storage:/root/.flowise
    ports:
        - ${FLOWISE_PORT_HOST}:${FLOWISE_PORT_CONT}
    environment:
        - PORT=${FLOWISE_PORT_CONT}
    entrypoint: /bin/sh
    command:
      - "-c"
      - "sleep 3; flowise start"

  
volumes:
  uploads:
    name: ${PROJECT_NAME}_uploads
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./uploads
  persistent_workflows:
    name: ${PROJECT_NAME}_persistent_workflows
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_workflows
  n8n_storage:
    name: ${PROJECT_NAME}_n8n_storage
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/n8n_storage
  postgres_storage:
    name: ${PROJECT_NAME}_postgres_storage
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/postgres_storage/
  ollama_storage:
    name: ${PROJECT_NAME}_ollama_storage
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/ollama_storage
  qdrant_storage:
    name: ${PROJECT_NAME}_qdrant_storage
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/qdrant_storage
  open_webui_storage:
    name: ${PROJECT_NAME}_open_webui_storage
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/open_webui_storage
  flowise_storage:
    name: ${PROJECT_NAME}_flowise_storage
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/flowise_storage

networks:
  project_network:
    name: ${PROJECT_NAME}_network
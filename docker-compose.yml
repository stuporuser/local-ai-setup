services:
  flowise:
    container_name: ${PROJECT_NAME}-flowise
    image: flowiseai/flowise
    restart: unless-stopped
    networks: 
      - project_network
    environment:
        - PORT=3001
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    container_name: ${PROJECT_NAME}-open-webui
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    networks:
      - project_network
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    container_name: ${PROJECT_NAME}-postgres
    image: postgres:16-alpine
    restart: unless-stopped
    networks:
      - project_network
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    container_name: ${PROJECT_NAME}-n8n-import
    image: n8nio/n8n:latest
    restart: no
    networks:
      - project_network
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY
      - N8N_USER_MANAGEMENT_JWT_SECRET
    links:
      - postgres
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    container_name: ${PROJECT_NAME}-n8n
    image: n8nio/n8n:latest
    restart: unless-stopped
    networks:
      - project_network
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY
      - N8N_USER_MANAGEMENT_JWT_SECRET
    links:
      - postgres
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    container_name: ${PROJECT_NAME}-qdrant
    image: qdrant/qdrant
    restart: unless-stopped
    networks:
      - project_network
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    container_name: ${PROJECT_NAME}-ollama
    image: ollama/ollama:latest
    restart: unless-stopped
    networks:
      - project_network
    ports:
      - 11434:11434
    volumes:
      - ollama_storage:/root/.ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    container_name: ${PROJECT_NAME}-ollama
    image: ollama/ollama:latest
    restart: unless-stopped
    networks:
      - project_network
    ports:
      - 11434:11434
    volumes:
      - ollama_storage:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    container_name: ${PROJECT_NAME}-ollama-pull
    image: ollama/ollama:latest
    restart: no
    networks:
      - project_network
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    #command:
      #- "-c"
      #- "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    container_name: ${PROJECT_NAME}-ollama-pull
    image: ollama/ollama:latest
    restart: no
    networks:
      - project_network
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    #command:
      #- "-c"
      #- "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"
    depends_on:
      - ollama-gpu

volumes:
  n8n_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/n8n_storage
  postgres_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/postgres_storage
  ollama_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/ollama_storage
  qdrant_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/qdrant_storage
  open_webui_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/open_webui_storage
  flowise_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./container_dirs/flowise_storage

networks:
  project_network:
    name: ${PROJECT_NAME}-network